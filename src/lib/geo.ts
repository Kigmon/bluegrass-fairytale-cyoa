
export type LatLng = { lat:number; lng:number }
export function haversineMiles(a:LatLng,b:LatLng){const R=3958.8;const dLat=((b.lat-a.lat)*Math.PI)/180;const dLon=((b.lng-a.lng)*Math.PI)/180;const lat1=(a.lat*Math.PI)/180;const lat2=(b.lat*Math.PI)/180;const c=Math.sin(dLat/2)**2+Math.cos(lat1)*Math.cos(lat2)*Math.sin(dLon/2)**2;const d=2*Math.atan2(Math.sqrt(c),Math.sqrt(1-c));return R*d}
export async function geocodeIfNeeded(address:string){const key=`geo:${address}`;const cached=localStorage.getItem(key);if(cached){try{return JSON.parse(cached)}catch{}}try{const u=new URL('https://nominatim.openstreetmap.org/search');u.searchParams.set('q',address);u.searchParams.set('format','jsonv2');u.searchParams.set('limit','1');const res=await fetch(u.toString(),{headers:{'Accept-Language':'en','User-Agent':'Bluegrass-CYOA/1.0'}});if(!res.ok) throw new Error('geocode failed');const data=await res.json();if(Array.isArray(data)&&data.length){const lat=parseFloat(data[0].lat),lng=parseFloat(data[0].lon);const ll={lat,lng};localStorage.setItem(key,JSON.stringify(ll));return ll}}catch(e){console.warn('Geocode error',address,e)}return null}
export function mapsLinkFor({address,lat,lng}:{address?:string;lat?:number;lng?:number}){const base='https://www.google.com/maps/dir/?api=1';if(lat!=null&&lng!=null)return `${base}&destination=${lat},${lng}`;if(address)return `${base}&destination=${encodeURIComponent(address)}`;return 'https://maps.google.com'}
